#!/bin/bash

# Pokémon Data Extraction Script
# Extracts name, height, weight, and type from the JSON file created in Task 0
# Uses jq, awk, and sed for advanced text manipulation

# Input file from Task 0
JSON_FILE="data.json"

# Check if the JSON file exists
if [ ! -f "$JSON_FILE" ]; then
    echo "Error: $JSON_FILE not found. Please run the API automation script first."
    exit 1
fi

# Function to extract and format Pokémon data
extract_pokemon_data() {
    # Extract basic data using jq
    name=$(jq -r '.name' "$JSON_FILE" 2>/dev/null)
    height=$(jq -r '.height' "$JSON_FILE" 2>/dev/null)
    weight=$(jq -r '.weight' "$JSON_FILE" 2>/dev/null)
    
    # Check if jq extraction was successful
    if [ "$name" == "null" ] || [ "$height" == "null" ] || [ "$weight" == "null" ]; then
        echo "Error: Failed to extract basic data from JSON file."
        exit 1
    fi
    
    # Extract the first type using jq and format it
    # The API returns types in an array, we want the first one
    type_raw=$(jq -r '.types[0].type.name' "$JSON_FILE" 2>/dev/null)
    
    if [ "$type_raw" == "null" ]; then
        echo "Error: Failed to extract type data from JSON file."
        exit 1
    fi
    
    # Capitalize the first letter of the name using sed
    name_formatted=$(echo "$name" | sed 's/^./\U&/')
    
    # Capitalize the first letter of the type using sed
    type_formatted=$(echo "$type_raw" | sed 's/^./\U&/')
    
    # Convert height from decimeters to meters using awk
    # The API returns height in decimeters, so divide by 10
    height_meters=$(echo "$height" | awk '{printf "%.1f", $1/10}')
    
    # Convert weight from hectograms to kilograms using awk
    # The API returns weight in hectograms, so divide by 10
    weight_kg=$(echo "$weight" | awk '{printf "%.0f", $1/10}')
    
    # Format and display the final output
    echo "${name_formatted} is of type ${type_formatted}, weighs ${weight_kg}kg, and is ${height_meters}m tall."
}

# Main execution
main() {
    # Check if required commands are available
    command -v jq >/dev/null 2>&1 || { echo "Error: jq is required but not installed."; exit 1; }
    command -v awk >/dev/null 2>&1 || { echo "Error: awk is required but not installed."; exit 1; }
    command -v sed >/dev/null 2>&1 || { echo "Error: sed is required but not installed."; exit 1; }
    
    # Extract and display the formatted data
    extract_pokemon_data
}

# Run the main function
main
