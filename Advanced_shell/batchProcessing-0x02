#!/bin/bash

# Batch Pokémon Data Retrieval Script with Retry Logic (Task 4)
# Compatible with Task 2: Fetches multiple Pokémon and saves as JSON files

# Configuration
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"
OUTPUT_DIR="pokemon_data"
DELAY_SECONDS=1  # Delay between requests to avoid rate limiting

# List of Pokémon to fetch
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to create output directory
create_output_directory() {
    if [ ! -d "$OUTPUT_DIR" ]; then
        mkdir -p "$OUTPUT_DIR"
        echo "Created directory: $OUTPUT_DIR"
    fi
}

# Function to fetch data with retry logic
fetch_pokemon_data() {
    local pokemon_name="$1"
    local output_file="$OUTPUT_DIR/${pokemon_name}.json"
    local api_url="${API_BASE_URL}/${pokemon_name}"
    local max_retries=3
    local attempt=1

    echo "Fetching data for ${pokemon_name}..."

    while [ $attempt -le $max_retries ]; do
        response=$(curl -s -w "%{http_code}" -o "$output_file" "$api_url")
        http_code="${response: -3}"

        if [ "$http_code" -eq 200 ]; then
            if [ -s "$output_file" ]; then
                echo -e "Saved data to ${OUTPUT_DIR}/${pokemon_name}.json ✅"
                return 0
            else
                echo -e "${RED}Error: Empty response for ${pokemon_name}${NC}"
                rm -f "$output_file"
            fi
        else
            echo -e "${YELLOW}Attempt $attempt failed for ${pokemon_name} (HTTP $http_code). Retrying...${NC}"
            rm -f "$output_file"
        fi

        attempt=$((attempt + 1))
        sleep "$DELAY_SECONDS"
    done

    echo -e "${RED}❌ Failed to retrieve ${pokemon_name} after $max_retries attempts.${NC}"
    return 1
}

# Function to validate JSON (optional)
validate_pokemon_data() {
    local pokemon_name="$1"
    local output_file="$OUTPUT_DIR/${pokemon_name}.json"
    
    if [ -f "$output_file" ] && command -v jq >/dev/null 2>&1; then
        if ! jq empty "$output_file" 2>/dev/null; then
            echo -e "${YELLOW}Warning: Invalid JSON for ${pokemon_name}${NC}"
            return 1
        fi
    fi
    return 0
}

# Display summary after processing
display_summary() {
    local success_count=0
    local total_count=${#POKEMON_LIST[@]}

    echo ""
    echo "=== Fetch Summary ==="

    for pokemon in "${POKEMON_LIST[@]}"; do
        if [ -f "$OUTPUT_DIR/${pokemon}.json" ]; then
            ((success_count++))
            echo -e "${GREEN}✅ ${pokemon}.json${NC}"
        else
            echo -e "${RED}❌ ${pokemon}.json (failed)${NC}"
        fi
    done

    echo ""
    echo "Successfully fetched: $success_count/$total_count Pokémon"

    if [ "$success_count" -eq "$total_count" ]; then
        echo -e "${GREEN}All Pokémon data retrieved successfully!${NC}"
    else
        echo -e "${YELLOW}Some Pokémon data failed to retrieve.${NC}"
    fi
}

# Handle Ctrl+C interruption
cleanup() {
    echo ""
    echo "Script interrupted. Cleaning up..."
    for pokemon in "${POKEMON_LIST[@]}"; do
        local output_file="$OUTPUT_DIR/${pokemon}.json"
        if [ -f "$output_file" ] && [ ! -s "$output_file" ]; then
            rm -f "$output_file"
            echo "Removed incomplete file: $output_file"
        fi
    done
    exit 1
}

# Setup interruption signal
trap cleanup INT TERM

# Main function
main() {
    echo "Starting batch Pokémon data retrieval..."
    echo "Target Pokémon: ${POKEMON_LIST[*]}"
    echo "Output directory: $OUTPUT_DIR"
    echo "Delay between requests: ${DELAY_SECONDS}s"
    echo ""

    create_output_directory

    local failed_count=0

    for i in "${!POKEMON_LIST[@]}"; do
        local pokemon="${POKEMON_LIST[i]}"

        if ! fetch_pokemon_data "$pokemon"; then
            ((failed_count++))
        else
            validate_pokemon_data "$pokemon"
        fi

        if [ $i -lt $((${#POKEMON_LIST[@]} - 1)) ]; then
            sleep "$DELAY_SECONDS"
        fi
    done

    display_summary

    if [ "$failed_count" -eq 0 ]; then
        echo -e "\nBatch processing completed successfully!"
        exit 0
    else
        echo -e "\nBatch processing completed with $failed_count failures."
        exit 1
    fi
}

# Ensure curl is available
command -v curl >/dev/null 2>&1 || { echo "Error: curl is required but not installed."; exit 1; }

# Run the script
main

